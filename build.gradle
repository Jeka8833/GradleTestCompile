plugins {
    id 'java'
    id 'maven-publish'
}

version "2.0.4"

// Write "disable" when there is no running class
// def _mainClass = "disable"
def _mainClass = "com.Jeka8833.Test.Main"

// Write "disable" when you don't need to create a version file
// def _versionFile = "disable"
def _versionFile = "com.Jeka8833.Test.Version"


// Maven repository setting
// ============================================
def _mavenURL = "https://maven.pkg.github.com/Jeka8833/GradleTestCompile"
group "com.Jeka8833"

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

/**
 * Manifest
 * */
ext.sharedManifest = manifest {
    if (_mainClass.equalsIgnoreCase("disable")) {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    } else {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': _mainClass
    }
}

/**
 * Build without libraries
 * */
jar {
    manifest = project.manifest {
        from sharedManifest
    }
}

/**
 * Build with libraries
 * */
task fatJar(type: Jar) {
    manifest = project.manifest {
        from sharedManifest
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

/**
 * Maven publication
 * */
publishing {
    repositories {
        maven {
            name = project.name
            url = _mavenURL
            credentials {
                username = project.findProperty("gpr.user")
                password = project.findProperty("gpr.key")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

/**
 * Create version class
 */
task updateVersionFile {
    if (!_versionFile.equalsIgnoreCase("disable")) {
        def lastDot = _versionFile.lastIndexOf('.')
        if (lastDot != -1) {
            def className = _versionFile.substring(lastDot + 1)
            def packagePath = _versionFile.substring(0, lastDot)
            new File(projectDir, "/src/main/java/" + _versionFile.replace('.', '/') + ".java")
                    .text = """package $packagePath;

public class $className {

    /**
    *This is a fully auto generated method, please don't touch it.
    */
    public static String getVersion() {
        return "$project.version";
    }
}"""
        } else {
            println("WARNING: Unable to create file in root folder")
        }
    }
}